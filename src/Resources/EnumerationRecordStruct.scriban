/*
 * {{ dto_type_name }}
 *    Id type: {{ id_type }}
 *    Enum type: {{ enum_type }}
 *
 *   Created: {{ timestamp }}
 *
 *   Author: {{ author }}
 *
 *   Copyright {{ copyright }}
 *      License: {{ license_expression}} (https: *opensource.org/licenses/{{ license_expression }})
 */

namespace {{ dto_namespace }};
using System;
using System.Diagnostics;
using System.Linq;
using System.Text;
using Dgmjr.Enumerations.Abstractions;
using static Dgmjr.Enumerations.Enumeration;

/// <summary>
/// A {{ data_structure_type }} for {{ dto_type_name }}.
/// </summary>
[Serializable]
[DebuggerDisplay("{DisplayName} - {Value}")]
public {{ data_structure_type }} {{ dto_type_name }} : I{{ dto_type_name }}
{
    protected {{ dto_type_name }}()
    {
    }

    /// <summary>
    /// Gets the underlying value of the enumeration.
    /// </summary>
    /// <returns>The underlying value of the enumeration.</returns>
    public {{ enum_namespace }}.{{ enum_type_name }} Value { get; init; }
    /// <summary>
    /// Gets <inheritdoc cref="Id" path="/value" />
    /// </summary>
    /// <returns>the numeric ID of the enumeration.</returns>
    public {{ enum_underlying_type }} Id { get; init; }
    object IIdentifiable.Id => Id;
    object IHaveAValue.Value => Value;
    /// <summary>
    /// Gets the field info of the backing type of the enumeration.
    /// </summary>
    /// <returns>The field info of the backing type of the enumeration.</returns>
    public FieldInfo? FieldInfo => GetType().GetFieldInfo(Name);
    private Func<IEnumeration, string> ToStringDelegate { get; init; } = e => e.DisplayName;
    /// <summary>
    /// Gets the custom attribute of type <typeparamref name="TAttribute"/> from
    /// the enumeration's <see cref="FieldInfo"/>.
    /// </summary>
    public TAttribute? GetCustomAttribute<TAttribute>() where TAttribute : Attribute
        => FieldInfo.GetCustomAttribute<DisplayAttribute>() as TAttribute;
    /// <summary>
    /// Gets the <see cref="DisplayAttribute"/> of the
    /// enumeration'<see cref="FieldInfo"/>.
    /// </summary>
    public DisplayAttribute? DisplayAttribute { get => _displayAttribute ??= GetCustomAttribute<DisplayAttribute>(); set => _displayAttribute = value; }
    private DisplayAttribute? _displayAttribute;

    /// <summary>
    /// Gets the short name of the enumeration as pulled from the
    /// <see cref="System.ComponentModel.DataAnnotations.DisplayAttribute"/>.
    /// </summary>
    [FromString]
    public string ShortName { get => _shortName ??= DisplayAttribute.ShortName; set => _shortName = value; }
    private string? _shortName
    /// <summary>
    /// Gets the description of the enumeration as pulled from the
    /// <see cref="System.ComponentModel.DataAnnotations.DisplayAttribute"/>.
    /// </summary>
    public string Description { get => _description ??= DisplayAttribute.Description; set => _description = value; }
    private string? _description
    /// <summary>
    /// Gets the display name of the enumeration as pulled from the
    /// <see cref="System.ComponentModel.DataAnnotations.DisplayAttribute"/>.
    /// </summary>
    [FromString]
    public string DisplayName { get => _displayName ??= DisplayAttribute.Name; set => _displayName = value; }
    private string? _displayName
    /// <summary>
    /// Gets the group name of the enumeration as pulled from the
    /// <see cref="System.ComponentModel.DataAnnotations.DisplayAttribute"/>.
    /// </summary>
    public string GroupName { get => _groupName ??= DisplayAttribute.GroupName; set => _groupName = value; }
    private string? _groupName
    /// <summary>
    /// Gets the order of the enumeration as pulled from the
    /// <see cref="System.ComponentModel.DataAnnotations.DisplayAttribute"/>.
    /// </summary>
    public int Order { get => _order.Value ??= DisplayAttribute?.Order; set => _order = value; }
    private int? _order;

    /// <summary>
    /// Gets the name of the enumeration.
    /// </summary>
    public string Name { get; init; }

    /// <summary>
    /// Gets the item's URI
    /// </summary>
    public Uri Uri { get => _uri ??= new ($"{GetType().FullName.Replace(".", ":")}:{Value.ToString()}"); set => _uri = value; }
    private Uri? _uri;
    /// <summary>
    /// Gets the item's GUID
    /// </summary>
    public guid Guid { get => (_guid = _guid ??= new (MD5.ComputeHash(Uri.ToString().ToUTF8Bytes()))).Value; set => _guid = value; }
    private guid? _guid;

    /// <summary>
    /// Gets the enumeration's value as a string.
    /// </summary>
    public override string ToString() => ToStringDelegate(this);

    public int CompareTo(object? other) => other is IEnumeration ? CompareTo((IEnumeration)other) : -1;
    public int CompareTo(IEnumeration other) => Id.CompareTo(other.Id);
    // public override bool Equals(object other) => other is IEnumeration && CompareTo(other) == 0;
    public override int GetHashCode() => Id.GetHashCode();

    public TypeCode GetTypeCode() => Convert.GetTypeCode(Value);

    #region type conversions
    /// <summary>
    /// Converts the value of the current
    /// <see cref="IEnumeration{{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}}"/> object to its
    /// equivalent string representation.
    /// </summary>
    public object ToType(Type conversionType, IFormatProvider? provider) => Convert.ChangeType(Value, conversionType);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current
    /// <see cref="IEnumeration{{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}}"/> object to its
    /// equivalent <see langword="bool"/> representation (if it exists).
    /// </summary>
    public bool ToBoolean(IFormatProvider? provider = null) => Convert.ToBoolean(Value, provider);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current
    /// <see cref="IEnumeration{{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}}"/> object to its
    /// equivalent <see langword="byte"/> representation (if it exists).
    /// </summary>
    public byte ToByte(IFormatProvider? provider = null) => Convert.ToByte(Value, provider);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current
    /// <see cref="IEnumeration{{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}}"/> object to its
    /// equivalent <see langword="char"/> representation (if it exists).
    /// </summary>
    public char ToChar(IFormatProvider? provider = null) => Convert.ToChar(Value, provider);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current
    /// <see cref="IEnumeration{{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}}"/> object to its
    /// equivalent <see cref="DateTime"/> representation (if it exists).
    /// </summary>
    public DateTime ToDateTime(IFormatProvider? provider = null) => Convert.ToDateTime(Value, provider);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current
    /// <see cref="IEnumeration{{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}}"/> object to its
    /// equivalent <see langword="decimal"/> representation (if it exists).
    /// </summary>
    public decimal ToDecimal(IFormatProvider? provider = null) => Convert.ToDecimal(Value, provider);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current
    /// <see cref="IEnumeration{{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}}"/> object to its
    /// equivalent <see langword="double"/> representation (if it exists).
    /// </summary>
    public double ToDouble(IFormatProvider? provider = null) => Convert.ToDouble(Value, provider);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current
    /// <see cref="IEnumeration{{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}}"/> object to its
    /// equivalent <see langword="short"/> representation (if it exists).
    /// </summary>
    public short ToInt16(IFormatProvider? provider = null) => Convert.ToInt16(Value, provider);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current
    /// <see cref="IEnumeration{{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}}"/> object to its
    /// equivalent <see langword="int"/> representation (if it exists).
    /// </summary>
    public int ToInt32(IFormatProvider? provider = null) => Convert.ToInt32(Value, provider);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current
    /// <see cref="IEnumeration{{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}}"/> object to its
    /// equivalent <see langword="long"/> representation (if it exists).
    /// </summary>
    public long ToInt64(IFormatProvider? provider = null) => Convert.ToInt64(Value, provider);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current
    /// <see cref="IEnumeration{{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}}"/> object to its
    /// equivalent <see langword="sbyte"/> representation (if it exists).
    /// </summary>
    public sbyte ToSByte(IFormatProvider? provider = null) => Convert.ToSByte(Value, provider);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current
    /// <see cref="IEnumeration{{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}}"/> object to its
    /// equivalent <see langword="float"/> representation (if it exists).
    /// </summary>
    public float ToSingle(IFormatProvider? provider = null) => Convert.ToSingle(Value, provider);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current
    /// <see cref="IEnumeration{{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}}"/> object to its
    /// equivalent <see langword="string"/> representation (if it exists).
    /// </summary>
    public string ToString(IFormatProvider? provider = null) => ToString();
    /// <summary>
    /// Converts the <see cref="Value"/> of the current
    /// <see cref="IEnumeration{{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}}"/> object to its
    /// equivalent <see langword="ushort"/> representation (if it exists).
    /// </summary>
    public ushort ToUInt16(IFormatProvider? provider = null) => Convert.ToUInt16(Value, provider);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current
    /// <see cref="IEnumeration{{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}}"/> object to its
    /// equivalent <see langword="uint"/> representation (if it exists).
    /// </summary>
    public uint ToUInt32(IFormatProvider? provider = null) => Convert.ToUInt32(Value, provider);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current
    /// <see cref="IEnumeration{{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}}"/> object to its
    /// equivalent <see langword="ulong"/> representation (if it exists).
    /// </summary>
    public ulong ToUInt64(IFormatProvider? provider = null) => Convert.ToUInt64(Value, provider);
    #endregion

    public static bool operator ==({{ dto_type_name }} left, {{ dto_type_name }}<{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}> right) => left.Value.Equals(right.Value);
    public static bool operator ==({{ dto_type_name }}<{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}> left, {{ dto_type_name }} right) => left.Value.Equals(right.Value);
    public static bool operator ==({{ dto_type_name }}<{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}> left, IEnumeration<{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}> right) => left.Value.Equals(right.Value);
    public static bool operator ==(IEnumeration<{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}> left, {{ dto_type_name }}<{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}> right) => left.Value.Equals(right.Value);
    public static bool operator !=({{ dto_type_name }} left, {{ dto_type_name }}<{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}> right) => !left.Value.Equals(right.Value);
    public static bool operator !=({{ dto_type_name }}<{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}> left, {{ dto_type_name }} right) => !left.Value.Equals(right.Value);
    public static bool operator !=({{ dto_type_name }}<{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}> left, IEnumeration<{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}> right) => !left.Value.Equals(right.Value);
    public static bool operator !=(IEnumeration<{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}> left, {{ dto_type_name }}<{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}> right) => !left.Value.Equals(right.Value);

    // public static IEnumeration? FromValue(Type t, object value) => Enumeration.Parse<{{ dto_type_name }}>(x => x.Value.Equals(value));
    /// <summary>
    /// Converts the <see cref="{{ enum_namespace }}.{{ enum_type_name }}" /> <paramref name="value"/> to an object of type {{ dto_type_name }}
    /// </summary>
    public static {{ dto_type_name }}? FromValue({{ enum_namespace }}.{{ enum_type_name }} value) => Enumeration.Parse(({{ dto_type_name }} e) => e.Value?.Equals(value) ?? false);
    /// <summary>
    /// Converts the <paramref name="value"/> to an object of type <typeparamref name="{{ dto_type_name }}" />
    /// </summary>
    public static {{ dto_type_name }}? FromValue(object value) => Enumeration.Parse(({{ dto_type_name }} e) => e.Value?.Equals(value) ?? false);

    /// <summary>
    /// Retrieves a list of values that are members of the enumeration.
    /// </summary>
    public static {{ enum_namespace }}.{{ enum_type_name }}[] GetAll()
        => Enumeration.GetAll<{{ enum_namespace }}.{{ enum_type_name }}>();
    /// <summary>
    /// Retrieves a list of <see cref="PropertyInfo"/>s that can be used to
    /// convert <see langword="string"/>s to the enumeration.
    /// </summary>
    private static IEnumerable<PropertyInfo> GetFromStringProperties(Type t)
        => t.GetRuntimeProperties().Where(p => p.GetCustomAttribute<FromStringAttribute>() != null);
    /// <summary>
    /// Retrieves a list of <see cref="PropertyInfo"/>s that can be used to
    /// convert <see langword="string"/>s to the enumeration.
    /// </summary>
    private static IEnumerable<PropertyInfo> GetFromStringProperties()
        => GetFromStringProperties(typeof({{ dto_type_name }}));

    /// <summary>
    /// Parses the <paramref name="value"/> to an object of type
    /// <typeparamref name="{{ dto_type_name }}"/>.
    /// </summary>
    public static {{ dto_type_name }}? Parse(string value)
        => Enumeration.Parse<{{ dto_type_name }}>(value);
    public static {{ dto_type_name }}? Parse(Func<{{ dto_type_name }}, bool> matchPredicate)
        => Enumeration.Parse<{{ dto_type_name }}>(matchPredicate);
    // public static IEnumeration? Parse(Type t, Func<IEnumeration, bool> matchPredicate)
    //     => GetAll(t).FirstOrDefault(matchPredicate);
    public static bool TryParse(string s, out {{ dto_type_name }} value)
        => (value = Enumeration.Parse<{{ dto_type_name }}>(s)) is not null;

    public bool Equals(IEnumeration? other) => GetHashCode() == other?.GetHashCode();
    public bool Equals(IEnumeration<{{ dto_type_name }}>? other) => Equals(other as IEnumeration);
    public bool Equals({{ dto_type_name }}<{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}>? other) => Equals(other as IEnumeration);
    public bool Equals(IEnumeration<{{ dto_type_name }}, {{ enum_underlying_type }}, {{ enum_namespace }}.{{ enum_type_name }}>? other) => Equals(other as IEnumeration);
    public bool Equals({{ dto_type_name }}? other) => Equals(other as IEnumeration);
    public int CompareTo({{ enum_namespace }}.{{ enum_type_name }}? other) => Value.CompareTo(other);
    public bool Equals({{ enum_namespace }}.{{ enum_type_name }}? other) => Value.Equals(other);

    public static IEnumerable<{{ dto_type_name }}> GetAll()
        => Enumeration.GetAll<{{ dto_type_name }}>();
}
