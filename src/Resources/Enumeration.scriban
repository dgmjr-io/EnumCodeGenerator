namespace {{ dto_namespace }};
using {{ dto_namespace }}.Abstractions;
using System;
using System.Diagnostics;
using System.Linq;
using System.Text;
using static System.StringComparison;

{{ compiler_generated_attributes }}
public {{ if base_type == "" || base_type == null  }} static {{ end }} partial {{ data_structure_type }} {{ dto_type_name }} {{ if base_type != "" && base_type != null }} : {{ base_type }}{{ end }}
{
    /// <summary>Converts the <paramref name="value"/> to an object of type</summary>
    public static I{{ dto_type_name }}? FromValue({{ enum_namespace }}.{{ enum_type_name }} value) => Parse(e => ((IHaveAValue<{{ enum_namespace }}.{{ enum_type_name }}>)e).Value.Equals(value));

    /// <summary>Converts the <paramref name="value"/> to an object of type <see cref="{{ dto_type_name }}" /></summary>
    public static I{{ dto_type_name }}? FromValue(object value) => Parse(e => ((IHaveAValue<{{ enum_namespace }}.{{ enum_type_name }}>)e).Value.Equals(value));

    /// <summary>Retrieves a list of values that are members of the enumeration.</summary>
    public static {{ enum_namespace }}.{{ enum_type_name }}[] GetAllValues() =>
      new[] {
        {{ fields_values }}
      };

    /// <summary>Parses the <paramref name="value"/> to an object of type <see cref="I{{ dto_type_name }}"/>.</summary>
    /// <exception cref="InvalidCastException">if no matching item was found</exception>
    public static I{{ dto_type_name }} Parse(string value)
        => Parse(e => e.Name == value || e.DisplayName == value || e.GuidString == value || e.UriString == value || e.ShortName == value);

    /// <summary>Uses the predicate the <paramref name="matchPredicate"/> to find an object of type <see cref="I{{ dto_type_name }}"/>.</summary>
    /// <exception cref="InvalidCastException">if no matching item was found</exception>
    public static I{{ dto_type_name }} Parse(Func<I{{ dto_type_name }}, bool> matchPredicate)
        => Parse(matchPredicate, true);

    private static I{{ dto_type_name }} Parse(Func<I{{ dto_type_name }}, bool> matchPredicate, bool throwOnNotFound)
        => GetAll().Where(matchPredicate).SingleOrDefault() ??
            (!throwOnNotFound ? default :
            throw new InvalidCastException($"There was no matching {{ dto_type_name }} found."));

    /// <summary>Attempts to parse the <paramref name="s"/> to an object of type <see cref="I{{ dto_type_name }}"/> and returns <see langword="true" /> if it's successful; returns <see langword="false" /> and sets <paramref name="value" /> = <see langword="null" /> if it's not found.</summary>
    /// <returns><see langword="true" />if the parse was successful, <see langword="false" /> otherwise</returns>
    public static bool TryParse(string s, out I{{ dto_type_name }}? value)
        {
          try
          {
            value = Parse(e => e.Name.Equals(s, OrdinalIgnoreCase) ||
                      e.DisplayName.Equals(s, OrdinalIgnoreCase) ||
                      e.GuidString.Equals(s, OrdinalIgnoreCase) ||
                      e.UriString.Equals(s, OrdinalIgnoreCase) ||
                      e.ShortName.Equals(s, OrdinalIgnoreCase));
            return value is not null;
          }
          catch
          {
            value = default;
            return false;
          }
        }

    /// <summary>Retrieves <inheritdoc cref="GetAll" path="/returns" /></summary>
    /// <returns>all <see cref="I{{ dto_type_name }}" />s</returns>
    public static IEnumerable<I{{ dto_type_name }}> GetAll() =>
      new[] {
        {{ fields_instances }}
      };
}
