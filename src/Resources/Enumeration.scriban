/*
 * {{ dto_type_name }}
 *    Id type: {{ id_type }}
 *    Enum type: {{ enum_type }}
 *
 *   Created: {{ timestamp }}
 *
 *   Author: {{ author }}
 *
 *   Copyright {{ copyright }}
 *      License: {{ license_expression}} (https: *opensource.org/licenses/{{ license_expression }})
 */

namespace {{ dto_namespace }};
using System;
using System.Diagnostics;
using System.Linq;
using System.Text;
using Dgmjr.Enumerations.Abstractions;
using static Dgmjr.Enumerations.Enumeration;

/// <summary>
/// An abstract base class for enumerations.
/// </summary>
public {{ data_structure_type }} {{ field_name }} : I{{ dto_type_name }}
{
    protected {{ field_name }}()
    {
    }

    public static readonly I{{ field_name }} Instance = new {{ field_name }}();

    /// <summary>
    /// Gets <inheritdoc cref="Value" path="/returns" />
    /// </summary>
    /// <returns>the underlying value of the enumeration.</returns>
    /// <value><see cref="{{ enum_namespace }}.{{ enum_type }}.{{ field_name }}" /></value>
    public const {{ enum_namespace }}.{{ enum_type }} Value = {{ enum_namespace }}.{{ enum_type }}.{{ value }};

    /// <inheritdoc cref="Value" />
    {{ enum_namespace }}.{{ enum_type }} IHaveAValue<{{ enum_namespace }}.{{ enum_type }}>.Value => Value;
    /// <summary>Gets <inheritdoc cref="Id" path="/returns" /></summary>
    /// <returns>The numeric ID of the enumeration.</returns>
    public const {{ id_type }} Id = {{ id }};
    /// <summary>Gets <inheritdoc cref="FieldInfo" path="/returns" /></summary>
    /// <returns>the field info of the backing type of the enumeration.</returns>
    public static readonly FieldInfo? FieldInfo => typeof({{ enum_namespace }}.{{ enum_type }}).GetFieldInfo(Name);
    private Func<IEnumeration, string> ToStringDelegate { get; init; } = e => e.DisplayName;
    /// <summary>
    /// Gets the custom attribute of type <typeparamref name="TAttribute"/> from
    /// the enumeration's <see cref="FieldInfo"/>.
    /// </summary>
    public static readonly TAttribute? GetCustomAttribute<TAttribute>() where TAttribute : Attribute
        => FieldInfo.GetCustomAttribute<DisplayAttribute>() as TAttribute;
    /// <summary>
    /// Gets the short name of the enumeration as pulled from the
    /// <see cref="System.ComponentModel.DataAnnotations.DisplayAttribute"/>.
    /// </summary>
    /// <value>{{ short_name }}</value>
    public const string ShortName = "{{ short_name }}";
    /// <summary>
    /// Gets the description of the enumeration as pulled from the
    /// <see cref="System.ComponentModel.DataAnnotations.DisplayAttribute"/>.
    /// </summary>
    /// <value>{{ description }}</value>
    public const string Description = "{{ description }}";
    /// <summary>
    /// Gets the display name of the enumeration as pulled from the
    /// <see cref="System.ComponentModel.DataAnnotations.DisplayAttribute"/>.
    /// </summary>
    [FromString]
    public const string DisplayName = "{{ display_name }}";
    /// <summary>
    /// Gets the group name of the enumeration as pulled from the
    /// <see cref="System.ComponentModel.DataAnnotations.DisplayAttribute"/>.
    /// </summary>
    /// <value>{{ group_name }}</value>
    public const string GroupName = "{{ group_name }}";
    /// <summary>
    /// Gets the order of the enumeration as pulled from the
    /// <see cref="System.ComponentModel.DataAnnotations.DisplayAttribute"/>.
    /// </summary>
    /// <value>{{ order }}</value>
    public const int Order = {{ order }};
    /// <summary>Gets the enumeration's URI</summary>
    /// <value>{{ uri_string }}</value>
    public const string UriString = "{{ uri_string }}";
    /// <summary>Gets the enumeration's GUID</summary>
    /// <value>{{ guid_string }}</value>
    public const string GuidString = "{{ guid_string }}";
    /// <inheritdoc cref="UriString" />
    public static readonly uri Uri = new(UriString);
    /// <inheritdoc cref="GuidString" />
    public static readonly guid Guid = new(GuidString);
    /// <inheritdoc cref="Name" />
    string IHaveAName.Name => Name;
    /// <inheritdoc cref="Id" />
    object IIdentifiable.Id => Id;
    /// <inheritdoc cref="Value" />
    object IHaveAValue.Value => Value;
    /// <inheritdoc cref="UriString" />
    uri IHaveAUri.Uri => Uri;
    /// <inheritdoc cref="GuidString" />
    guid IHaveAGuid.Guid => Guid;
    /// <inheritdoc cref="ShortName" />
    string IHaveAShortName.ShortName => ShortName;
    /// <inheritdoc cref="Description" />
    string IHaveADescription.Description => Description;
    /// <inheritdoc cref="DisplayName" />
    string IHaveADisplayName.DisplayName => DisplayName;
    /// <inheritdoc cref="GroupName" />
    string IEnumeration.GroupName => GroupName;
    /// <inheritdoc cref="Order" />
    int IEnumeration.Order => Order;

    /// <summary>
    /// Gets the enumeration's value as a string.
    /// </summary>
    public override string ToString() => DisplayString;

    public int CompareTo(object? other) => other is IEnumeration ie ? CompareTo(ie) : -1;
    public int CompareTo(IEnumeration other) => Order.CompareTo(other.Order);
    public override int GetHashCode() => Id.GetHashCode();

    public TypeCode GetTypeCode() => Convert.GetTypeCode(Value);

    #region type conversions
    /// <summary>
    /// Converts the value of the current object to its equivalent string representation in another type.
    /// </summary>
    public object ToType(Type conversionType, IFormatProvider? provider) => Convert.ChangeType(Value, conversionType);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current object to its
    /// equivalent <see langword="bool"/> representation (if it exists).
    /// </summary>
    public bool ToBoolean(IFormatProvider? provider = null) => Convert.ToBoolean(Value, provider);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current object to its
    /// equivalent <see langword="byte"/> representation (if it exists).
    /// </summary>
    public byte ToByte(IFormatProvider? provider = null) => Convert.ToByte(Value, provider);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current object to its
    /// equivalent <see langword="char"/> representation (if it exists).
    /// </summary>
    public char ToChar(IFormatProvider? provider = null) => Convert.ToChar(Value, provider);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current object to its
    /// equivalent <see cref="DateTime"/> representation (if it exists).
    /// </summary>
    public DateTime ToDateTime(IFormatProvider? provider = null) => Convert.ToDateTime(Value, provider);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current object to its
    /// equivalent <see langword="decimal"/> representation (if it exists).
    /// </summary>
    public decimal ToDecimal(IFormatProvider? provider = null) => Convert.ToDecimal(Value, provider);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current
    /// <see cref="IEnumeration{{{ dto_type_name }}, {{ id_type }}, {{ enum_namespace }}.{{ enum_type }}}"/> object to its
    /// equivalent <see langword="double"/> representation (if it exists).
    /// </summary>
    public double ToDouble(IFormatProvider? provider = null) => Convert.ToDouble(Value, provider);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current object to its
    /// equivalent <see langword="short"/> representation (if it exists).
    /// </summary>
    public short ToInt16(IFormatProvider? provider = null) => Convert.ToInt16(Value, provider);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current object to its
    /// equivalent <see langword="int"/> representation (if it exists).
    /// </summary>
    public int ToInt32(IFormatProvider? provider = null) => Convert.ToInt32(Value, provider);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current object to its
    /// equivalent <see langword="long"/> representation (if it exists).
    /// </summary>
    public long ToInt64(IFormatProvider? provider = null) => Convert.ToInt64(Value, provider);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current object to its
    /// equivalent <see langword="sbyte"/> representation (if it exists).
    /// </summary>
    public sbyte ToSByte(IFormatProvider? provider = null) => Convert.ToSByte(Value, provider);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current object to its
    /// equivalent <see langword="float"/> representation (if it exists).
    /// </summary>
    public float ToSingle(IFormatProvider? provider = null) => Convert.ToSingle(Value, provider);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current object to its
    /// equivalent <see langword="string"/> representation (if it exists).
    /// </summary>
    public string ToString(IFormatProvider? provider = null) => ToString();
    /// <summary>
    /// Converts the <see cref="Value"/> of the current
    /// <see cref="IEnumeration{{{ dto_type_name }}, {{ id_type }}, {{ enum_namespace }}.{{ enum_type }}}"/> object to its
    /// equivalent <see langword="ushort"/> representation (if it exists).
    /// </summary>
    public ushort ToUInt16(IFormatProvider? provider = null) => Convert.ToUInt16(Value, provider);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current object to its
    /// equivalent <see langword="uint"/> representation (if it exists).
    /// </summary>
    public uint ToUInt32(IFormatProvider? provider = null) => Convert.ToUInt32(Value, provider);
    /// <summary>
    /// Converts the <see cref="Value"/> of the current object to its
    /// equivalent <see langword="ulong"/> representation (if it exists).
    /// </summary>
    public ulong ToUInt64(IFormatProvider? provider = null) => Convert.ToUInt64(Value, provider);
    #endregion

    public static bool operator ==({{ dto_type_name }} left, I{{ dto_type_name }} right) => left.Value.CompareTo(right.Value) == 0;
    public static bool operator ==(I{{ dto_type_name }} left, {{ dto_type_name }} right) => left.Value.CompareTo(right.Value) == 0;
    public static bool operator ==({{ dto_type_name }} left, IEnumeration right) => left.Value.CompareTo(right.Value) == 0;
    public static bool operator ==(IEnumeration left, {{ dto_type_name }} right) => left.Value.CompareTo(right.Value) == 0;

    public static bool operator ==({{ dto_type_name }} left, I{{ dto_type_name }} right) => left.Value.CompareTo(right.Value) != 0;
    public static bool operator ==(I{{ dto_type_name }} left, {{ dto_type_name }} right) => left.Value.CompareTo(right.Value) != 0;
    public static bool operator ==({{ dto_type_name }} left, IEnumeration right) => left.Value.CompareTo(right.Value) != 0;
    public static bool operator ==(IEnumeration left, {{ dto_type_name }} right) => left.Value.CompareTo(right.Value) != 0;

    public static bool operator <({{ dto_type_name }} left, I{{ dto_type_name }} right) => left.Value.CompareTo(right.Value) < 0;
    public static bool operator <(I{{ dto_type_name }} left, {{ dto_type_name }} right) => left.Value.CompareTo(right.Value) < 0;
    public static bool operator <({{ dto_type_name }} left, IEnumeration right) => left.Value.CompareTo(right.Value) < 0;
    public static bool operator <(IEnumeration left, {{ dto_type_name }} right) => left.Value.CompareTo(right.Value) < 0;

    public static bool operator <=({{ dto_type_name }} left, I{{ dto_type_name }} right) => left.Value.CompareTo(right.Value) <= 0;
    public static bool operator <=(I{{ dto_type_name }} left, {{ dto_type_name }} right) => left.Value.CompareTo(right.Value) <= 0;
    public static bool operator <=({{ dto_type_name }} left, IEnumeration right) => left.Value.CompareTo(right.Value) <= 0;
    public static bool operator <=(IEnumeration left, {{ dto_type_name }} right) => left.Value.CompareTo(right.Value) <= 0;

    public static bool operator >({{ dto_type_name }} left, I{{ dto_type_name }} right) => left.Value.CompareTo(right.Value) > 0;
    public static bool operator >({{ dto_type_name }} left, I{{ dto_type_name }} right) => left.Value.CompareTo(right.Value) > 0;
    public static bool operator >({{ dto_type_name }} left, IEnumeration right) => left.Value.CompareTo(right.Value) > 0;
    public static bool operator >(IEnumeration left, {{ dto_type_name }} right) => left.Value.CompareTo(right.Value) > 0;

    public static bool operator >=({{ dto_type_name }} left, I{{ dto_type_name }} right) => left.Value.CompareTo(right.Value) >= 0;
    public static bool operator >=(I{{ dto_type_name }} left, {{ dto_type_name }} right) => left.Value.CompareTo(right.Value) >= 0;
    public static bool operator >=({{ dto_type_name }} left, IEnumeration right) => left.Value.CompareTo(right.Value) >= 0;
    public static bool operator >=(IEnumeration left, {{ dto_type_name }} right) => left.Value.CompareTo(right.Value) >= 0;

    // public static IEnumeration? FromValue(Type t, object value) => Enumeration.Parse<{{ dto_type_name }}>(x => x.Value.Equals(value));
    /// <summary>
    /// Converts the <paramref name="value"/> to an object of type
    /// </summary>
    public static I{{ dto_type_name }}? FromValue({{ enum_namespace }}.{{ enum_type }} value) => Enumeration.Parse(({{ dto_type_name }} e) => e.Value?.Equals(value) ?? false);
    /// <summary>
    /// Converts the <paramref name="value"/> to an object of type <typeparamref name="{{ dto_type_name }}" />
    /// </summary>
    public static I{{ dto_type_name }}? FromValue(object value) => Enumeration.Parse(({{ dto_type_name }} e) => e.Value?.Equals(value) ?? false);

    /// <summary>
    /// Retrieves a list of values that are members of the enumeration.
    /// </summary>
    public static {{ enum_namespace }}.{{ enum_type }}[] Ge{{ enum_namespace }}.{{ enum_type }}s()
        => Enumeration.Ge{{ enum_namespace }}.{{ enum_type }}s<{{ enum_namespace }}.{{ enum_type }}>();
    /// <summary>
    /// Retrieves a list of <see cref="PropertyInfo"/>s that can be used to
    /// convert <see langword="string"/>s to the enumeration.
    /// </summary>
    private static IEnumerable<PropertyInfo> GetFromStringProperties(Type t)
        => t.GetRuntimeProperties().Where(p => p.GetCustomAttribute<FromStringAttribute>() != null);
    /// <summary>
    /// Retrieves a list of <see cref="PropertyInfo"/>s that can be used to
    /// convert <see langword="string"/>s to the enumeration.
    /// </summary>
    private static IEnumerable<PropertyInfo> GetFromStringProperties()
        => GetFromStringProperties(typeof({{ dto_type_name }}));

    /// <summary>
    /// Parses the <paramref name="value"/> to an object of type
    /// <typeparamref name="{{ dto_type_name }}"/>.
    /// </summary>
    public static {{ dto_type_name }}? Parse(string value)
        => Enumeration.Parse<{{ dto_type_name }}>(value);
    public static {{ dto_type_name }}? Parse(Func<{{ dto_type_name }}, bool> matchPredicate)
        => Enumeration.Parse<{{ dto_type_name }}>(matchPredicate);
    // public static IEnumeration? Parse(Type t, Func<IEnumeration, bool> matchPredicate)
    //     => Ge{{ enum_namespace }}.{{ enum_type }}s(t).FirstOrDefault(matchPredicate);
    public static bool TryParse(string s, out {{ dto_type_name }} value)
        => (value = Enumeration.Parse<{{ dto_type_name }}>(s)) is not null;

    public bool Equals(IEnumeration? other) => GetHashCode() == other?.GetHashCode();
    public bool Equals(IEnumeration<{{ dto_type_name }}>? other) => Equals(other as IEnumeration);
    public bool Equals({{ dto_type_name }}<{{ dto_type_name }}, {{ id_type }}, {{ enum_namespace }}.{{ enum_type }}>? other) => Equals(other as IEnumeration);
    public bool Equals(IEnumeration<{{ dto_type_name }}, {{ id_type }}, {{ enum_namespace }}.{{ enum_type }}>? other) => Equals(other as IEnumeration);
    public bool Equals({{ dto_type_name }}? other) => Equals(other as IEnumeration);
    public int CompareTo({{ enum_namespace }}.{{ enum_type }}? other) => Value.CompareTo(other);
    public bool Equals({{ enum_namespace }}.{{ enum_type }}? other) => Value.Equals(other);

    public static IEnumerable<{{ dto_type_name }}> GetAll()
        => Enumeration.GetAll<{{ dto_type_name }}>();
}
