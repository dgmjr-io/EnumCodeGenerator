namespace {{ dto_namespace }};
using {{ dto_namespace }}.Abstractions;

public {%{{ if base_type == "" || base_type == null  }} static {{ end }}%} partial {{ data_structure_type }} {{ dto_type_name }} {%{{ if base_type != "" && base_type != null }} : {{ base_type }}{{ end }}%}
{
  {{ compiler_generated_attributes }}
  public partial {{ data_structure_type }} {{ field_name }} :
  {{ if base_type != "" && base_type != null }}{{ dto_type_name }}, {{ end }}
      I{{ enumeration_name }},
      IHaveAName,
      IHaveAValue,
      IHaveAValue<{{ enum_underlying_type }}>,
      IHaveAValue<{{ enum_namespace }}.{{ enum_type }}>,
      IHaveADescription,
      IHaveAUri,
      IHaveAUriString,
      IHaveSynonyms,
      IHaveAShortName,
      IHaveAGuid,
      IHaveAGuidString,
      IHaveADisplayName,
      IIdentifiable,
      IIdentifiable<{{ enum_underlying_type }}>,
      IConvertible,
      IEquatable<{{ enum_underlying_type }}>,
      IEquatable<I{{ dto_type_name }}>
  {
      /// <summary>The {{ enumeration_name }}'s value</summary>
      /// <value><see cref="{{ enum_namespace }}.{{ enum_type }}.{{ field_name }}" /></value>
      public const {{ enum_namespace }}.{{ enum_type }} Value = {{ enum_namespace }}.{{ enum_type }}.{{ field_name }};

      /// <summary>The underlying ordinal value of the {{ enumeration_name }}</summary>
      /// <value>{{ id }}</value>
      public const {{ enum_underlying_type }} Id = {{ id }};

      /// <summary>The order in which the {{ enumeration_name }} should appear</summary>
      /// <value>{{ order }}</value>
      /// <default>0</default>
      public const int Order = {{ order }};

      /// <summary>A short description of the {{ enumeration_name }}</summary>
      /// <value>{{ description }}</value>
      public const string Description = "{{ description }}";

      /// <summary>The {{ enumeration_name }}'s display name</summary>
      /// <value>{{ display_name }}</value>
      public const string DisplayName = "{{ display_name }}";

      /// <summary>The {{ enumeration_name }}'s group's name</summary>
      /// <value>{{ group_name }}</value>
      public const string Group = "{{ group_name }}";

      /// <summary>The {{ enumeration_name }}'s GUID string</summary>
      /// <value>{{ guid_string }}</value>
      public const string GuidString = "{{ guid_string }}";

      /// <summary>The {{ enumeration_name }}'s name</summary>
      /// <value>{{ field_name }}</value>
      public const string Name = "{{ field_name }}";

      /// <summary>The {{ enumeration_name }}'s short name</summary>
      /// <value>{{ short_name }}</value>
      public const string ShortName = "{{ short_name }}";

      /// <summary>The {{ enumeration_name }}'s URI string</summary>
      /// <value>{{ uri_string }}</value>
      public const string UriString = "{{ uri_string }}";

      /// <summary>The {{ enumeration_name }}'s GUID</summary>
      /// <value>{{ guid_string }}</value>
      public static readonly guid Guid = new(GuidString);

      /// <summary>The {{ enumeration_name }}'s URI</summary>
      /// <value>{{ uri_string }}</value>
      public static readonly System.Uri Uri = new(UriString);

      /// <summary>The {{ enumeration_name }}'s synonyms</summary>
      /// <value>{{ synonyms }}</value>
      public static readonly string[] Synonyms = new string[] {
        {{ synonyms }}
      };

      /// <summary>The {{ enumeration_name }}'s value</summary>
      /// <value><see cref="{{ enum_namespace }}.{{ enum_type }}.{{ field_name }}" /></value>
      {{ enum_namespace }}.{{ enum_type }} IHaveAValue<{{ enum_namespace }}.{{ enum_type }}>.Value => Value;

      /// <summary>The {{ enumeration_name }}'s value as a(n) <see langword="{{ enum_underlying_type }}" /></summary>
      /// <value>{{ id }}</value>
      {{ enum_underlying_type }} IHaveAValue<{{ enum_underlying_type }}>.Value => Id;

      /// <summary>The {{ enumeration_name }}'s GUID</summary>
      /// <value>{{ guid_string }}</value>
      guid IHaveAGuid.Guid => Guid;

      /// <summary>The {{ enumeration_name }}'s GUID</summary>
      /// <value>{{ guid_string }}</value>
      string IHaveAGuidString.GuidString => GuidString;

      /// <summary>The {{ enumeration_name }}'s display name</summary>
      /// <value>{{ display_name }}</value>
      string IHaveADisplayName.DisplayName => DisplayName;

      /// <summary>The {{ enumeration_name }}'s value</summary>
      /// <value><see cref="{{ enum_namespace }}.{{ enum_type }}.{{ field_name }}" /><value>
      object IHaveAValue.Value => Value;

      /// <summary>A short description of the {{ enumeration_name }}</summary>
      /// <value>{{ description }}</value>
      string IHaveADescription.Description => Description;

      /// <summary>The {{ enumeration_name }}'s name</summary>
      /// <value>{{ field_name }}</value>
      string IHaveAName.Name => Name;

      /// <summary>The {{ enumeration_name }}'s short name</summary>
      /// <value>{{ short_name }}</value>
      string IHaveAShortName.ShortName => ShortName;

      /// <summary>The {{ enumeration_name }}'s URI</summary>
      /// <value>{{ uri_string }}</value>
      Uri IHaveAUri.Uri => Uri;

      /// <summary>The {{ enumeration_name }}'s URI</summary>
      /// <value>{{ uri_string }}</value>
      string IHaveAUriString.UriString => UriString;

      /// <summary>The {{ enumeration_name }}'s URI</summary>
      /// <value>{{ uri_string }}</value>
      uri I{{ dto_type_name }}.Uri => uri.From(Uri.ToString());

      /// <summary>The order in which the {{ enumeration_name }} should appear</summary>
      /// <value>{{ order }}</value>
      /// <default>0</default>
      int I{{ enumeration_name }}.Order => Order;

      /// <summary>The {{ enumeration_name }}'s Id as an <see langword="object" /></summary>
      /// <value>{{ id }}</value>
      object IIdentifiable.Id => Id;

      /// <summary>The {{ enumeration_name }}'s Id as a(n) <see langword="{{ enum_underlying_type }}" /></summary>
      /// <value>{{ id }}</value>
      {{ enum_underlying_type }} IIdentifiable<{{ enum_underlying_type }}>.Id => Id;

      /// <summary>The {{ enumeration_name }}'s synonyms</summary>
      /// <value>{{ synonyms }}</value>
      string[]  IHaveSynonyms.Synonyms { get => Synonyms; init { } }

      bool IEquatable<I{{ enumeration_name }}>.Equals(I{{ enumeration_name }} value)
        => this == value;

        bool IEquatable<{{ enum_underlying_type }}>.Equals({{ enum_underlying_type }} value)
          => (({{ enum_namespace }}.{{ enum_type }})Convert.ChangeType(value, typeof({{ enum_namespace }}.{{ enum_type }}))) == Value;

      public int CompareTo(object? other) => other is IEnumeration ie ? CompareTo(ie) : -1;
      public int CompareTo(IEnumeration other) => Order.CompareTo(other.Order);
      public override int GetHashCode() => Id.GetHashCode();

      public TypeCode GetTypeCode() => Convert.GetTypeCode(Value);

      #region type conversions
      /// <summary>
      /// Converts the value of the current object to its equivalent string representation in another type.
      /// </summary>
      public object ToType(Type conversionType, IFormatProvider? provider) => Convert.ChangeType(Value, conversionType);
      /// <summary>
      /// Converts the <see cref="Value"/> of the current object to its
      /// equivalent <see langword="bool"/> representation (if it exists).
      /// </summary>
      public bool ToBoolean(IFormatProvider? provider = null) => Convert.ToBoolean(Value, provider);
      /// <summary>
      /// Converts the <see cref="Value"/> of the current object to its
      /// equivalent <see langword="byte"/> representation (if it exists).
      /// </summary>
      public byte ToByte(IFormatProvider? provider = null) => Convert.ToByte(Value, provider);
      /// <summary>
      /// Converts the <see cref="Value"/> of the current object to its
      /// equivalent <see langword="char"/> representation (if it exists).
      /// </summary>
      public char ToChar(IFormatProvider? provider = null) => Convert.ToChar(Value, provider);
      /// <summary>
      /// Converts the <see cref="Value"/> of the current object to its
      /// equivalent <see cref="DateTime"/> representation (if it exists).
      /// </summary>
      public DateTime ToDateTime(IFormatProvider? provider = null) => Convert.ToDateTime(Value, provider);
      /// <summary>
      /// Converts the <see cref="Value"/> of the current object to its
      /// equivalent <see langword="decimal"/> representation (if it exists).
      /// </summary>
      public decimal ToDecimal(IFormatProvider? provider = null) => Convert.ToDecimal(Value, provider);
      /// <summary>
      /// Converts the <see cref="Value"/> of the current
      /// <see cref="I{{ dto_type_name }}"/> object to its
      /// equivalent <see langword="double"/> representation (if it exists).
      /// </summary>
      public double ToDouble(IFormatProvider? provider = null) => Convert.ToDouble(Value, provider);
      /// <summary>
      /// Converts the <see cref="Value"/> of the current object to its
      /// equivalent <see langword="short"/> representation (if it exists).
      /// </summary>
      public short ToInt16(IFormatProvider? provider = null) => Convert.ToInt16(Value, provider);
      /// <summary>
      /// Converts the <see cref="Value"/> of the current object to its
      /// equivalent <see langword="int"/> representation (if it exists).
      /// </summary>
      public int ToInt32(IFormatProvider? provider = null) => Convert.ToInt32(Value, provider);
      /// <summary>
      /// Converts the <see cref="Value"/> of the current object to its
      /// equivalent <see langword="long"/> representation (if it exists).
      /// </summary>
      public long ToInt64(IFormatProvider? provider = null) => Convert.ToInt64(Value, provider);
      /// <summary>
      /// Converts the <see cref="Value"/> of the current object to its
      /// equivalent <see langword="sbyte"/> representation (if it exists).
      /// </summary>
      public sbyte ToSByte(IFormatProvider? provider = null) => Convert.ToSByte(Value, provider);
      /// <summary>
      /// Converts the <see cref="Value"/> of the current object to its
      /// equivalent <see langword="float"/> representation (if it exists).
      /// </summary>
      public float ToSingle(IFormatProvider? provider = null) => Convert.ToSingle(Value, provider);
      /// <summary>
      /// Converts the <see cref="Value"/> of the current object to its
      /// equivalent <see langword="string"/> representation (if it exists).
      /// </summary>
      public string ToString(IFormatProvider? provider = null) => ToString();
      /// <summary>
      /// Converts the <see cref="Value"/> of the current object to its
      /// equivalent <see langword="ushort"/> representation (if it exists).
      /// </summary>
      public ushort ToUInt16(IFormatProvider? provider = null) => Convert.ToUInt16(Value, provider);
      /// <summary>
      /// Converts the <see cref="Value"/> of the current object to its
      /// equivalent <see langword="uint"/> representation (if it exists).
      /// </summary>
      public uint ToUInt32(IFormatProvider? provider = null) => Convert.ToUInt32(Value, provider);
      /// <summary>
      /// Converts the <see cref="Value"/> of the current object to its
      /// equivalent <see langword="ulong"/> representation (if it exists).
      /// </summary>
      public ulong ToUInt64(IFormatProvider? provider = null) => Convert.ToUInt64(Value, provider);
      #endregion

      public static bool operator ==({{ field_name }} left, IHaveAValue<{{ enum_namespace }}.{{ enum_type }}> right) => ((IHaveAValue<{{ enum_namespace }}.{{ enum_type }}>)left).Value.CompareTo(right.Value) == 0;
      public static bool operator ==(IHaveAValue<{{ enum_namespace }}.{{ enum_type }}> left, {{ field_name }} right) => left.Value.CompareTo(((IHaveAValue<{{ enum_namespace }}.{{ enum_type }}>)right).Value) == 0;

      public static bool operator !=({{ field_name }} left, IHaveAValue<{{ enum_namespace }}.{{ enum_type }}> right) => ((IHaveAValue<{{ enum_namespace }}.{{ enum_type }}>)left).Value.CompareTo(right.Value) != 0;
      public static bool operator !=(IHaveAValue<{{ enum_namespace }}.{{ enum_type }}> left, {{ field_name }} right) => left.Value.CompareTo(((IHaveAValue<{{ enum_namespace }}.{{ enum_type }}>)right).Value) != 0;

      public static bool operator <({{ field_name }} left, IHaveAValue<{{ enum_namespace }}.{{ enum_type }}> right) => ((IHaveAValue<{{ enum_namespace }}.{{ enum_type }}>)left).Value.CompareTo(right.Value) < 0;
      public static bool operator <(IHaveAValue<{{ enum_namespace }}.{{ enum_type }}> left, {{ field_name }} right) => left.Value.CompareTo(((IHaveAValue<{{ enum_namespace }}.{{ enum_type }}>)right).Value) < 0;

      public static bool operator >({{ field_name }} left, IHaveAValue<{{ enum_namespace }}.{{ enum_type }}> right) => ((IHaveAValue<{{ enum_namespace }}.{{ enum_type }}>)left).Value.CompareTo(right.Value) > 0;
      public static bool operator >(IHaveAValue<{{ enum_namespace }}.{{ enum_type }}> left, {{ field_name }} right) => left.Value.CompareTo(((IHaveAValue<{{ enum_namespace }}.{{ enum_type }}>)right).Value) > 0;

      public static bool operator <=({{ field_name }} left, IHaveAValue<{{ enum_namespace }}.{{ enum_type }}> right) => ((IHaveAValue<{{ enum_namespace }}.{{ enum_type }}>)left).Value.CompareTo(right.Value) <= 0;
      public static bool operator <=(IHaveAValue<{{ enum_namespace }}.{{ enum_type }}> left, {{ field_name }} right) => left.Value.CompareTo(((IHaveAValue<{{ enum_namespace }}.{{ enum_type }}>)right).Value) <= 0;

      public static bool operator >=({{ field_name }} left, IHaveAValue<{{ enum_namespace }}.{{ enum_type }}> right) => ((IHaveAValue<{{ enum_namespace }}.{{ enum_type }}>)left).Value.CompareTo(right.Value) >= 0;
      public static bool operator >=(IHaveAValue<{{ enum_namespace }}.{{ enum_type }}> left, {{ field_name }} right) => left.Value.CompareTo(((IHaveAValue<{{ enum_namespace }}.{{ enum_type }}>)right).Value) >= 0;

      /// <summary>An instance of the {{ enumeration_name }} as an I{{ enumeration_name }}</summary>
      public static readonly I{{ enumeration_name }} Instance = new {{ field_name }}();
  }
}
