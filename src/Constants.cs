using System;
using System.Reflection;
using System.Reflection.Metadata;
using System.Security;

namespace Dgmjr.Enumerations.CodeGenerator
{
    public static class Constants
    {
        public const string Header = """
        /*
        * <auto-generated/>
        * {{ filename }}
        * This code was generated by {{ tool_name }}, version {{ tool_version }}
        * Date/time generated: {{ timestamp }}
        *   Created: {{ timestamp }}
        *
        *   Author: {{ author }}
        *
        *   Copyright {{ copyright }}
        *   License: {{ license_expression }} (https://opensource.org/licenses/{{ license_expression }})
        */
        using static System.AttributeTargets;
        using static System.Text.RegularExpressions.RegexOptions;
        using System;
        using System.CodeDom.Compiler;
        using System.Collections.Generic;
        using System.Diagnostics.CodeAnalysis;
        using System.Globalization;
        using System.Linq;
        using System.Runtime.CompilerServices;
        using System.Text;
        using System.Text.RegularExpressions;
        #if NET7_0_OR_GREATER
        using StringSyntax = System.Diagnostics.CodeAnalysis.StringSyntaxAttribute;
        #endif
        #nullable enable
        """;

        public const string EnumerationRecordStruct = nameof(EnumerationRecordStruct);
        public const string EnumerationStruct = nameof(EnumerationStruct);
#pragma warning disable IDE1006
        public const string @record = nameof(@record);
        public const string @struct = nameof(@struct);
        public const string @class = nameof(@class);
        public const string record_struct = $"{@record} {@struct}";
        public const string record_class = $"{@record} {@class}";
        public const string scriban = nameof(scriban);
#pragma warning restore

        public const string AttributeName = "Enumeration";
        public const string AttributeNamespace = "Dgmjr.Enumerations";
        public const string AttributeFullName = AttributeNamespace + "." + AttributeName;
        public const string GenerateEnumerationRecordStructAttribute = nameof(
            GenerateEnumerationRecordStructAttribute
        );
        public const string GenerateEnumerationRecordClassAttribute = nameof(
            GenerateEnumerationRecordClassAttribute
        );
        public const string GenerateEnumerationStructAttribute = nameof(
            GenerateEnumerationStructAttribute
        );
        public const string GenerateEnumerationClassAttribute = nameof(
            GenerateEnumerationClassAttribute
        );

        public static readonly string[] AttributeClasses = new[]
        {
            GenerateEnumerationClassAttribute,
            GenerateEnumerationRecordClassAttribute,
            GenerateEnumerationRecordStructAttribute,
            GenerateEnumerationStructAttribute
        };

        public const string GenerateEnumerationTypeAttributes = nameof(
            GenerateEnumerationTypeAttributes
        );

        public static readonly Scriban.Template HeaderTemplate = Scriban.Template.Parse(Header);

        public static string HeaderFilledIn(string filename) =>
            HeaderTemplate.Render(
                new
                {
                    filename,
                    toolName = ThisAssembly.Info.Title,
                    toolVersion = ThisAssembly.Info.Version,
                    timestamp = DateTimeOffset.Now
                }
            );

        public const string GenerateEnumerationTypeAttributeDeclarations = $$$"""
        public sealed class {{{GenerateEnumerationRecordStructAttribute}}} : Attribute
        {
            public {{{GenerateEnumerationRecordStructAttribute}}}(string? typeName = null, string? @namespace = null) { }
        }

        public sealed class {{{GenerateEnumerationStructAttribute}}} : Attribute
        {
            public {{{GenerateEnumerationStructAttribute}}}(string? typeName = null, string? @namespace = null) { }
        }

        public sealed class {{{GenerateEnumerationRecordClassAttribute}}} : Attribute
        {
            public {{{GenerateEnumerationRecordClassAttribute}}}(string? typeName = null, string? @namespace = null) { }
        }

        public sealed class {{{GenerateEnumerationClassAttribute}}} : Attribute
        {
            public {{{GenerateEnumerationClassAttribute}}}(string? typeName = null, string? @namespace = null) { }
        }
        """;

        public const string Value = nameof(Value);
        public const string DisplayName = nameof(DisplayName);
        public const string GroupName = nameof(GroupName);
        public const string ShortName = nameof(ShortName);
        public const string Name = nameof(Name);
        public const string Order = nameof(Order);
        public const string Id = nameof(Id);
        public const string Description = nameof(Description);
        public const string GuidAttribute = nameof(GuidAttribute);
        public const string UrlAttribute = nameof(UrlAttribute);
        public const string DisplayAttribute = nameof(DisplayAttribute);
        public const string UriPattern = "urn:{0}:{1}:{2}";
        public const string DgmjrAbstractionsNamespace = "Dgmjr.Abstractions";

        public static readonly string EnumerationRecordStructDeclaration =
            typeof(Constants).Assembly.ReadAssemblyResourceAllText(
                $"{EnumerationRecordStruct}.{scriban}"
            );
        public static readonly string EnumerationStructDeclaration =
            typeof(Constants).Assembly.ReadAssemblyResourceAllText(
                $"{EnumerationStruct}.{scriban}"
            );

        public static readonly Scriban.Template EnumerationRecordStructDeclarationTemplate =
            Scriban.Template.Parse(EnumerationRecordStructDeclaration);
        public static readonly Scriban.Template EnumerationStructDeclarationTemplate =
            Scriban.Template.Parse(EnumerationStructDeclaration);
    }
}
